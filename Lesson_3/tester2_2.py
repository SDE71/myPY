# поработаем ещё раз со списками на добавление
courses = ['History', 'Math', 'Programming', 'Literature', 'Phisics']
numbers = [1, 6, 4, 7, 9, 11]
# допустим, хочу в список курсов добавить какой-то урок - для этого есть отдельный метод
# работая со строками мы не изменяем формат типа данных
string_sample = 'Hello world'
string_sample.capitalize()
print(string_sample)
print(type(string_sample))
# для изменения нужно дать новое значение через новое назначение
string_sample = string_sample.capitalize()
print(string_sample)
print(type(string_sample))
# допустим, хочу в список курсов добавить какой-то урок
# для этого есть отдельный метод через команду
# append (добавляет в конец списка значения поодиночке), например добавим предмет Искусство
courses.append('Art')
print(courses)
# проиндексировав мы видим, что Art это последний элемент
print(courses[-1])
# если мы ходим добавить в нужное место, то используется другая команда insert
courses.insert(2, 'English')
# поставив на 2 индекс новый предмет, остальные индексы сдвигаются вправо
print(courses)
# создадим новый список курсов и добавим его в первый список курсов
new_courses = ['Art', 'English']
courses.append(new_courses)
print(courses)
print(type(courses))
# вроде как 9 элементов, но длина курса будет 8, так как мы добавили ['Art', 'English'] как один элемент
print(len(courses))
# т.е. методы append и insert не подойдут для вставления списка в список
courses.insert(2, new_courses)
print(courses)
print(type(courses))
# Применив метод extened (расширить), каждый элемент добавиться отдельно  в конец списка
# при этом метод extened используется для списка с элементами 2 и более
# если будет вставлять один элемент в списке, то команда разобьёт слово на индексы
courses.extend(new_courses)
print(courses)
print(len(courses))
# если будет вставлять один элемент в списке, то команда разобьёт слово на индексы
# и если будет вставляться число или числа, то будет выдавать ошибку
courses.extend('Art')
print(courses)
# подходим к такому термину, как итерируемый объект iterable (повторяемый), т.е. ПЕРЕБОР
# строки являются итерируемым объектом
# итеррация iterable - перебор одних и тех же действий относительно каждого элемента
# в каком-нибудь интеррируемом объекте
# строка - это итеррируемый объект, состоящий из символов,
# к которым можно применить один и тот же код в строке
# список - это итеррируемый объект, состоящий из элементов,
# к которым можно применить один и тот же код в списке
# кортежи, словари и множители
# булевы, none value и числа, не переведённые в строку интеррировать не можем
